import {io as b}from"https://cdn.socket.io/4.4.1/socket.io.esm.min.js";(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))a(t);new MutationObserver(t=>{for(const s of t)if(s.type==="childList")for(const I of s.addedNodes)I.tagName==="LINK"&&I.rel==="modulepreload"&&a(I)}).observe(document,{childList:!0,subtree:!0});function h(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerPolicy&&(s.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?s.credentials="include":t.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function a(t){if(t.ep)return;t.ep=!0;const s=h(t);fetch(t.href,s)}})();const f=document.getElementById("urlInput"),u=document.getElementById("simpleConnCheck"),d=document.getElementById("lastMsgDisplayCheck"),r=document.getElementById("connectButton"),E=document.getElementById("numConns"),B=document.getElementById("connRate"),T=document.getElementById("messageContent"),l=document.getElementById("channelInput"),C=document.getElementById("sendButton"),v=document.getElementById("currentConns"),y=document.getElementById("maxConns"),R=document.getElementById("totalMessagesSent"),m=document.getElementById("totalMessagesReceived"),O=document.getElementById("messagesReceivedLastSecond"),L=document.getElementById("messageOutputCol"),x=document.getElementById("messageOutput");let i=new Set,k=new Set;function N(e){alert(e)}const D={urlInput:"",simpleConnCheck:!0,lastMessageCheck:!1,numConnsInput:1,connRateInput:1,messageContentInput:"",channelInput:"message",currentConns:0,maxConns:0,totalMessagesSent:0,totalMessagesReceived:0,messagesReceivedLastSecond:0};window.addEventListener("DOMContentLoaded",()=>{const e={urlInput:o("urlInput"),simpleConnCheck:o("simpleConnCheck"),lastMessageCheck:o("lastMessageCheck"),numConnsInput:o("numConnsInput"),connRateInput:o("connRateInput"),messageContentInput:o("messageContentInput"),channelInput:o("channelInput")};for(const n in e)e[n]===null&&(e[n]=D[n]);f.value=e.urlInput,u.checked=e.simpleConnCheck,d.checked=e.lastMessageCheck,E.value=e.numConnsInput,B.value=e.connRateInput,T.value=e.messageContentInput,l.value=e.channelInput,v.innerHTML=0,y.innerHTML=0,R.innerHTML=0,m.innerHTML=0,O.innerHTML=0,u.checked&&M.classList.add("hidden"),d.checked||L.classList.add("hidden")});window.addEventListener("beforeunload",()=>{c("urlInput",f.value),c("simpleConnCheck",u.checked),c("lastMessageCheck",d.checked),c("numConnsInput",E.value),c("connRateInput",B.value),c("messageContentInput",T.value),c("channelInput",l.value)});const M=document.getElementById("connOptionsRow");u.addEventListener("change",()=>{u.checked?M.classList.add("hidden"):M.classList.remove("hidden")});d.addEventListener("change",()=>{d.checked?L.style.display="block":L.style.display="none"});function o(e){const n=localStorage.getItem(e);return n?JSON.parse(n):null}function c(e,n){localStorage.setItem(e,JSON.stringify(n))}let g=!1;function P(){if(g)return;if(f.value=="")throw new Error("URL field is empty");const e=b(f.value,{transports:["websocket"],upgrade:!1});e.on("connect",()=>{i.add(e),console.log(`sock ${e.id} connected`),r.textContent="Disconnect",r.style.backgroundColor="#F44336"}),e.on("message",n=>{m.innerHTML++,x.innerHTML=JSON.stringify(n)}),e.on("disconnect",n=>{i.delete(e),console.log(`sock disconnected due to ${n}`)})}r.addEventListener("click",()=>{if(S(),r.textContent==="Connect")try{g=!1;let e=1,n=1;u.checked||(e=parseInt(E.value),n=parseInt(B.value));const h=1e3/n;if(isNaN(e)||isNaN(n))throw new Error("Please enter valid numbers for the number of connections and connection rate.");for(let a=0;a<e&&!g;a++)setTimeout(P,a*h)}catch(e){N(e),console.log(e)}else g=!0,i.forEach(e=>{e.close()}),k.clear(),r.textContent="Connect",r.style.backgroundColor="#4CAF50"});C.addEventListener("click",()=>{C.style.backgroundColor="#808080",setTimeout(()=>{C.style.backgroundColor=""},200),l.value!="message"&&!k.has(l.value)&&(k.add(l.value),i.forEach(e=>{e.on(l.value,n=>{m.innerHTML++})})),i.forEach(e=>{R.innerHTML++,e.emit(l.value,T.value)})});let H=0;function S(){v.innerHTML=i.size,y.innerHTML=Math.max(v.innerHTML,y.innerHTML),O.innerHTML=m.innerHTML-H,H=m.innerHTML}setInterval(S,1e3);const p=document.getElementById("helpButton"),w=document.getElementById("helpDiv");p.addEventListener("click",()=>{p.innerText==="Help"?(p.innerText="Help X",w.classList.add("show")):(p.innerText="Help",w.classList.remove("show"))});
